[{"uri":"https://devonburriss.me/hotspot/explanations/overview.html","title":"Hotspot Overview","content":"\n# Hotspot\n\nHotspot is a CLI tool for inspecting source code in a git repository for possible hotpots you may want to look into to decrease maintenance and potential risk.  \n\nSupport of multiple languages\n\n## Installation\n\n`dotnet tool install -g hotspot`\n\n## Basic Usage\n\nNavigate to your git repository and run:  \n`hotspot recommend`\n\nFor help, run:  \n`hotspot --help`\n\nYou can also install it locally. See the [dotnet tool docs](https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-tool-install)\n\nSometimes Hotspot will have some trouble finding your git binary. It needs access to this to run the commands on your git repository to get history to inspect.\nThis is easy enough to fix. Just add an ENVIRONMENT variable: `HOTSPOT_GIT_EXECUTABLE` = *path/to/git/binary/file*.\n\n## Features\n\n- Recommendations based on git changes & complexity\n- Consumption of [SCC](https://github.com/boyter/scc) to contribute metrics for analysis\n- Integrate test coverage report in analysis\n- Detailed control of the files that are included in the analysis\n- Multiple supported output channels (console, API, file) and formats (text, markdown, html, json)\n- Multiple metric sources: SCC, Visual Studio's Metric.exe, SonarQube\n\n## Using SCC\n\n[SCC](https://github.com/boyter/scc) is an awesome cli tool for getting info like LoC and cyclomatic complexity for many different code programming languages.\nYou can use it as follows to generate a file that can then be used by Hotspot.\n\n`scc --by-file --format json > scc_out.json`\n### Usage\n\n`dotnet hotspot recommend -r /GitRepo --scc-file /scc_out.json`\n## Language support\n\nIf using SCC, all [languages supported by SCC](https://github.com/boyter/scc/blob/master/LANGUAGES.md) are supported. If an SCC file is not used, Hotspot will count lines of code, attempting to ignore comments. The comment ignore is currently very rudimentary. See [Limitations](/limitations.html) for a more in-depth description.\n\n\n"},{"uri":"https://devonburriss.me/hotspot/explanations/limitations.html","title":"Limitations","content":"\n# Limitations\n\nIn version 0 there are currently some limitations to be aware of.\n\n## Comments when using built-in LoC\n\nCurrently, when not using SCC, Hotspot will using lines of code (LoC) as a measure of complexity of a file to make recommendations on. The default LoC counter assumes a comment is `//`. Obviously this is extremely naive and will be improved in the future.\n\n## Git bin location\n\nThe git binary is used under the hood. If the application is complaining about not finding it, set env variable 'HOTSPOT_GIT_EXECUTABLE' with the path to the exe/binary.\n\n## Colour on console\n\nThe colours cannot be turned off on the console output. This will be changed in the future."},{"uri":"https://devonburriss.me/hotspot/tutorials/some-post.html","title":"Some Post","content":"\n# Some Post\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi nisi diam, vehicula quis blandit id, suscipit sed libero. Proin at diam dolor. In hac habitasse platea dictumst. Donec quis dui vitae quam eleifend dignissim non sed libero. In hac habitasse platea dictumst. In ullamcorper mollis risus, a vulputate quam accumsan at. Donec sed felis sodales, blandit orci id, vulputate orci.\n\nIn est nulla, ornare vitae elit sed, consequat sollicitudin dui. Duis posuere nulla malesuada elit volutpat ultricies. Mauris et tellus tortor. In ligula elit, pellentesque eget est et, mattis rhoncus nisl. Sed orci ex, mollis quis justo eu, dapibus tincidunt turpis. Sed rhoncus odio non lacus ullamcorper volutpat. Suspendisse blandit ullamcorper condimentum. Quisque et viverra nisi. Vivamus in mollis nulla. Nulla faucibus sed ligula et blandit.\n\nVivamus nec libero faucibus, cursus ex et, consequat mauris. Pellentesque commodo ullamcorper vestibulum. Donec efficitur, ipsum et dapibus varius, purus mauris gravida augue, eu mattis lorem turpis eget dui. Curabitur nibh erat, posuere sed eros a, blandit venenatis risus. Vestibulum cursus imperdiet ultrices. In eu efficitur dui, eget tempus enim. Nunc imperdiet, enim et sagittis lacinia, lacus metus eleifend purus, blandit pellentesque leo ante ac velit. Nam ac sagittis est. Cras accumsan, odio vel lacinia mollis, metus tortor malesuada nisi, et consectetur neque quam in erat. Sed ultricies aliquam hendrerit. Etiam non aliquam ipsum, id rutrum magna. Morbi id tincidunt mauris. Vestibulum nec iaculis massa. Etiam fringilla, orci quis faucibus vulputate, risus nibh finibus nisl, et vehicula ipsum leo a tortor. Curabitur mauris elit, bibendum vitae velit at, dignissim ornare arcu.\n\n"},{"uri":"https://devonburriss.me/hotspot/tutorials/how-to-start.html","title":"Getting started","content":"\n# How to start in 60 seconds\n\n1. Make sure you've installed .Net Core version defined in [global.json](global.json)\n2. Run `dotnet tool restore` to install all developer tools required to build the project\n3. Run `dotnet fake build` to build default target of [build script](build.fsx)\n4. To run tests use `dotnet fake build -t Test`\n5. To build documentation use `dotnet fake build -t Docs`\n"},{"uri":"https://devonburriss.me/hotspot/how-tos/somePostWithCode.html","title":"Some post with Code","content":"\nLiterate Markdown\n=================\n\nThis file demonstrates how to write Markdown document with\nembedded F# snippets that can be transformed into nice HTML.\n\nIn this case, the document itself is a valid Markdown and\nyou can use standard Markdown features to format the text:\n\n - Here is an example of unordered list and...\n - Text formatting including **bold** and _emphasis_\n\nFor more information, see the [Markdown][md] reference.\n\n [md]: http://daringfireball.net/projects/markdown\n\n\nWriting F# code\n---------------\nIn standard Markdown, you can include code snippets by\nwriting a block indented by four spaces and the code\nsnippet will be turned into a `<pre>` element. If you do\nthe same using Literate F# tool, the code is turned into\na nicely formatted F# snippet:\n\n    /// The Hello World of functional languages!\n    let rec factorial x =\n      if x = 0 then 1\n      else x * (factorial (x - 1))\n\n    let f10 = factorial 10\n\n\nHiding code\n-----------\n\nIf you want to include some code in the source code,\nbut omit it from the output, you can use the `hide`\ncommand. You can also use `module=...` to specify that\nthe snippet should be placed in a separate module\n(e.g. to avoid duplicate definitions).\n\n    [hide, module=Hidden]\n    /// This is a hidden answer\n    let answer = 42\n\nThe value will be deffined in the F# code that is\nprocessed and so you can use it from other (visible)\ncode and get correct tool tips:\n\n    let answer = Hidden.answer\n\n\nIncluding other snippets\n------------------------\n\nWhen writing literate programs as Markdown documents,\nyou can also include snippets in other languages.\nThese will not be colorized and processed as F#\ncode samples:\n\n    [lang=csharp]\n    Console.WriteLine(\"Hello world!\");\n\nThis snippet is turned into a `pre` element with the\n`lang` attribute set to `csharp`."},{"uri":"https://devonburriss.me/hotspot/how-tos/diagrams.html","title":"Diagrams","content":"\nSome interesting diagram\n\n<div class=\"mermaid\">\n    graph TD\n    A[Client] --> B[Load Balancer]\n    B --> C[Server01]\n    B --> D[Server02]\n</div>\n\nGenerated with:\n\n```\n<div class=\"mermaid\">\n    graph TD\n    A[Client] --> B[Load Balancer]\n    B --> C[Server01]\n    B --> D[Server02]\n</div>\n```\n\nSome more diagrams\n\n<div class=\"mermaid\">\ngraph LR\n    A[Hard edge] -->|Link text| B(Round edge)\n    B --> C{Decision}\n    C -->|One| D[Result one]\n    C -->|Two| E[Result two]\n</div>\n\nGenerated with:\n\n```\n<div class=\"mermaid\">\ngraph LR\n    A[Hard edge] -->|Link text| B(Round edge)\n    B --> C{Decision}\n    C -->|One| D[Result one]\n    C -->|Two| E[Result two]\n</div>\n```\n\n\n"},{"uri":"https://devonburriss.me/hotspot/how-tos/development.html","title":"Development","content":"\n# Setting up for local development\n\n1. Fork repository\n2. Pull repository\n3. If you intend on making a Pull Request, create a feature branch\n4. Run `dotnet tool restore`\n5. Run `dotnet paket install`\n6. Run `dotnet fake build -t Test`\n\n# Installing tool locally\n\n1. (Optional) If you have installed the tool before you will need to clear your Nuget cache. `dotnet nuget locals all -c`. Or just bump the version by adding a new entry to CHANGELOG.md\n2. Ensure `hotspot` is not in your .config/dotnet-tools.json manifest file\n3. Run `dotnet fake build -t Install-Local`\n\n## Running the docs locally\n\nNOTE: On MacOSX I needed to comment out the compiler directives at top of `literalloader.fsx` and this change is checked in.\n\n```fsharp\n//#if !FORNAX\n#load \"contentloader.fsx\"\nopen Contentloader\n//#endif\n```\n\n1. Make sure paket restore has run successfully from root\n2. Run `dotnet fake build -t BuildRelease` so there is definitely a DLL to pull docs from\n3. Navigate to */docs* folder\n4. Run `dotnet fornax watch`\n5. Visit *http://localhost:8080/*\n6. You can now make changes to the docs and they will update in real time"},{"uri":"https://devonburriss.me/hotspot/explanations/overview.html","title":"Hotspot Overview","content":"\n# Hotspot\n\nHotspot is a CLI tool for inspecting source code in a git repository for possible hotpots you may want to look into to decrease maintenance and potential risk.  \n\nSupport of multiple languages\n\n## Installation\n\n`dotnet tool install -g hotspot`\n\n## Basic Usage\n\nNavigate to your git repository and run:  \n`hotspot recommend`\n\nFor help, run:  \n`hotspot --help`\n\nYou can also install it locally. See the [dotnet tool docs](https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-tool-install)\n\nSometimes Hotspot will have some trouble finding your git binary. It needs access to this to run the commands on your git repository to get history to inspect.\nThis is easy enough to fix. Just add an ENVIRONMENT variable: `HOTSPOT_GIT_EXECUTABLE` = *path/to/git/binary/file*.\n\n## Features\n\n- Recommendations based on git changes & complexity\n- Consumption of [SCC](https://github.com/boyter/scc) to contribute metrics for analysis\n- Integrate test coverage report in analysis\n- Detailed control of the files that are included in the analysis\n- Multiple supported output channels (console, API, file) and formats (text, markdown, html, json)\n- Multiple metric sources: SCC, Visual Studio's Metric.exe, SonarQube\n\n## Using SCC\n\n[SCC](https://github.com/boyter/scc) is an awesome cli tool for getting info like LoC and cyclomatic complexity for many different code programming languages.\nYou can use it as follows to generate a file that can then be used by Hotspot.\n\n`scc --by-file --format json > scc_out.json`\n### Usage\n\n`dotnet hotspot recommend -r /GitRepo --scc-file /scc_out.json`\n## Language support\n\nIf using SCC, all [languages supported by SCC](https://github.com/boyter/scc/blob/master/LANGUAGES.md) are supported. If an SCC file is not used, Hotspot will count lines of code, attempting to ignore comments. The comment ignore is currently very rudimentary. See [Limitations](/limitations.html) for a more in-depth description.\n\n\n"},{"uri":"https://devonburriss.me/hotspot/explanations/limitations.html","title":"Limitations","content":"\n# Limitations\n\nIn version 0 there are currently some limitations to be aware of.\n\n## Comments when using built-in LoC\n\nCurrently, when not using SCC, Hotspot will using lines of code (LoC) as a measure of complexity of a file to make recommendations on. The default LoC counter assumes a comment is `//`. Obviously this is extremely naive and will be improved in the future.\n\n## Git bin location\n\nThe git binary is used under the hood. If the application is complaining about not finding it, set env variable 'HOTSPOT_GIT_EXECUTABLE' with the path to the exe/binary.\n\n## Colour on console\n\nThe colours cannot be turned off on the console output. This will be changed in the future."},{"uri":"https://devonburriss.me/hotspot/tutorials/some-post.html","title":"Some Post","content":"\n# Some Post\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi nisi diam, vehicula quis blandit id, suscipit sed libero. Proin at diam dolor. In hac habitasse platea dictumst. Donec quis dui vitae quam eleifend dignissim non sed libero. In hac habitasse platea dictumst. In ullamcorper mollis risus, a vulputate quam accumsan at. Donec sed felis sodales, blandit orci id, vulputate orci.\n\nIn est nulla, ornare vitae elit sed, consequat sollicitudin dui. Duis posuere nulla malesuada elit volutpat ultricies. Mauris et tellus tortor. In ligula elit, pellentesque eget est et, mattis rhoncus nisl. Sed orci ex, mollis quis justo eu, dapibus tincidunt turpis. Sed rhoncus odio non lacus ullamcorper volutpat. Suspendisse blandit ullamcorper condimentum. Quisque et viverra nisi. Vivamus in mollis nulla. Nulla faucibus sed ligula et blandit.\n\nVivamus nec libero faucibus, cursus ex et, consequat mauris. Pellentesque commodo ullamcorper vestibulum. Donec efficitur, ipsum et dapibus varius, purus mauris gravida augue, eu mattis lorem turpis eget dui. Curabitur nibh erat, posuere sed eros a, blandit venenatis risus. Vestibulum cursus imperdiet ultrices. In eu efficitur dui, eget tempus enim. Nunc imperdiet, enim et sagittis lacinia, lacus metus eleifend purus, blandit pellentesque leo ante ac velit. Nam ac sagittis est. Cras accumsan, odio vel lacinia mollis, metus tortor malesuada nisi, et consectetur neque quam in erat. Sed ultricies aliquam hendrerit. Etiam non aliquam ipsum, id rutrum magna. Morbi id tincidunt mauris. Vestibulum nec iaculis massa. Etiam fringilla, orci quis faucibus vulputate, risus nibh finibus nisl, et vehicula ipsum leo a tortor. Curabitur mauris elit, bibendum vitae velit at, dignissim ornare arcu.\n\n"},{"uri":"https://devonburriss.me/hotspot/tutorials/how-to-start.html","title":"Getting started","content":"\n# How to start in 60 seconds\n\n1. Make sure you've installed .Net Core version defined in [global.json](global.json)\n2. Run `dotnet tool restore` to install all developer tools required to build the project\n3. Run `dotnet fake build` to build default target of [build script](build.fsx)\n4. To run tests use `dotnet fake build -t Test`\n5. To build documentation use `dotnet fake build -t Docs`\n"},{"uri":"https://devonburriss.me/hotspot/how-tos/somePostWithCode.html","title":"Some post with Code","content":"\nLiterate Markdown\n=================\n\nThis file demonstrates how to write Markdown document with\nembedded F# snippets that can be transformed into nice HTML.\n\nIn this case, the document itself is a valid Markdown and\nyou can use standard Markdown features to format the text:\n\n - Here is an example of unordered list and...\n - Text formatting including **bold** and _emphasis_\n\nFor more information, see the [Markdown][md] reference.\n\n [md]: http://daringfireball.net/projects/markdown\n\n\nWriting F# code\n---------------\nIn standard Markdown, you can include code snippets by\nwriting a block indented by four spaces and the code\nsnippet will be turned into a `<pre>` element. If you do\nthe same using Literate F# tool, the code is turned into\na nicely formatted F# snippet:\n\n    /// The Hello World of functional languages!\n    let rec factorial x =\n      if x = 0 then 1\n      else x * (factorial (x - 1))\n\n    let f10 = factorial 10\n\n\nHiding code\n-----------\n\nIf you want to include some code in the source code,\nbut omit it from the output, you can use the `hide`\ncommand. You can also use `module=...` to specify that\nthe snippet should be placed in a separate module\n(e.g. to avoid duplicate definitions).\n\n    [hide, module=Hidden]\n    /// This is a hidden answer\n    let answer = 42\n\nThe value will be deffined in the F# code that is\nprocessed and so you can use it from other (visible)\ncode and get correct tool tips:\n\n    let answer = Hidden.answer\n\n\nIncluding other snippets\n------------------------\n\nWhen writing literate programs as Markdown documents,\nyou can also include snippets in other languages.\nThese will not be colorized and processed as F#\ncode samples:\n\n    [lang=csharp]\n    Console.WriteLine(\"Hello world!\");\n\nThis snippet is turned into a `pre` element with the\n`lang` attribute set to `csharp`."},{"uri":"https://devonburriss.me/hotspot/how-tos/diagrams.html","title":"Diagrams","content":"\nSome interesting diagram\n\n<div class=\"mermaid\">\n    graph TD\n    A[Client] --> B[Load Balancer]\n    B --> C[Server01]\n    B --> D[Server02]\n</div>\n\nGenerated with:\n\n```\n<div class=\"mermaid\">\n    graph TD\n    A[Client] --> B[Load Balancer]\n    B --> C[Server01]\n    B --> D[Server02]\n</div>\n```\n\nSome more diagrams\n\n<div class=\"mermaid\">\ngraph LR\n    A[Hard edge] -->|Link text| B(Round edge)\n    B --> C{Decision}\n    C -->|One| D[Result one]\n    C -->|Two| E[Result two]\n</div>\n\nGenerated with:\n\n```\n<div class=\"mermaid\">\ngraph LR\n    A[Hard edge] -->|Link text| B(Round edge)\n    B --> C{Decision}\n    C -->|One| D[Result one]\n    C -->|Two| E[Result two]\n</div>\n```\n\n\n"},{"uri":"https://devonburriss.me/hotspot/how-tos/development.html","title":"Development","content":"\n# Setting up for local development\n\n1. Fork repository\n2. Pull repository\n3. If you intend on making a Pull Request, create a feature branch\n4. Run `dotnet tool restore`\n5. Run `dotnet paket install`\n6. Run `dotnet fake build -t Test`\n\n# Installing tool locally\n\n1. (Optional) If you have installed the tool before you will need to clear your Nuget cache. `dotnet nuget locals all -c`. Or just bump the version by adding a new entry to CHANGELOG.md\n2. Ensure `hotspot` is not in your .config/dotnet-tools.json manifest file\n3. Run `dotnet fake build -t Install-Local`\n\n## Running the docs locally\n\nNOTE: On MacOSX I needed to comment out the compiler directives at top of `literalloader.fsx` and this change is checked in.\n\n```fsharp\n//#if !FORNAX\n#load \"contentloader.fsx\"\nopen Contentloader\n//#endif\n```\n\n1. Make sure paket restore has run successfully from root\n2. Run `dotnet fake build -t BuildRelease` so there is definitely a DLL to pull docs from\n3. Navigate to */docs* folder\n4. Run `dotnet fornax watch`\n5. Visit *http://localhost:8080/*\n6. You can now make changes to the docs and they will update in real time"},{"uri":"https://devonburriss.me/hotspot/reference/Hotspot/index.html","title":"Hotspot - API Reference","content":"Hotspot \n Hotspot global"},{"uri":"https://devonburriss.me/hotspot/reference/Hotspot/hotspot-recommendusecase.html","title":"RecommendUsecase","content":"RecommendUsecase \n  \n  \n  \n recommend  \n "},{"uri":"https://devonburriss.me/hotspot/reference/Hotspot/global-program.html","title":"Program","content":"Program \n  \n  \n HotSpotCommands  RecommendArgs  \n main  \n "},{"uri":"https://devonburriss.me/hotspot/reference/Hotspot/hotspot-recommendsetting.html","title":"RecommendSetting","content":"RecommendSetting \n  \n RepositoryFolder  SccFile "},{"uri":"https://devonburriss.me/hotspot/reference/Hotspot/hotspot-recommendationscmd.html","title":"RecommendationsCmd","content":"RecommendationsCmd \n  \n FileSystem  CodeRepository  Settings "},{"uri":"https://devonburriss.me/hotspot/reference/Hotspot/program-hotspotcommands.html","title":"HotSpotCommands","content":"HotSpotCommands \n  \n Recommend "},{"uri":"https://devonburriss.me/hotspot/reference/Hotspot/program-recommendargs.html","title":"RecommendArgs","content":"RecommendArgs \n  \n Repository_Directory  Scc_File "}]